// scss-lint:disable VariableForProperty
// Disable linter because we're passing in the color as a variable, so we need
// to call the get-darker/lighter functions dynamically instead of with set vars

// mixin to create buttons
@mixin nc-btn($color: $primary-button-color, $txtcolor: $nc-white, $height: $nc-button-height, $hoverstate: false, $outlined: false) {
  @include nc-btn-base($height);

  @if not $outlined {
    @include nc-btn-color($color, $txtcolor, $hoverstate: $hoverstate);
  }
  @else {
    @include nc-btn-outlined($color, $hoverstate: $hoverstate);
  }
}

// shared base for buttons
@mixin nc-btn-base($height) {
  @include nc-responsive-font('md', $height);

  display: inline-block;
  min-height: $height;
  padding: 0 $nc-button-padding;
  font-weight: normal;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;
  border-radius: $nc-button-border-radius;
  box-shadow: none;
  cursor: pointer;

  @include nc-breakpoint($nc-bp-md) {
    min-height: $nc-button-height-lg;
    padding: 0 $nc-button-padding-lg;
    line-height: $nc-button-height-lg;
  }

  &:hover {
    text-decoration: none;
  }
}

// set the button color
@mixin nc-btn-color($bgcolor, $txtcolor, $hoverstate: false) {
  color: $txtcolor;
  background-color: $bgcolor;
  border: 0;

  @if $hoverstate {
    &:active,
    &:focus,
    &:hover {
      color: $txtcolor;
    }

    &:active {
      background-color: get-darker($bgcolor);
    }

    @include nc-breakpoint($nc-bp-lg) {
      &:focus,
      &:hover {
        color: $txtcolor;
        background: get-darker($bgcolor);
      }
    }
  }

  &[disabled] {
    @include nc-btn-disabled($bgcolor);
  }
}

// set the outlined color
@mixin nc-btn-outlined($color, $hoverstate: false) {
  color: $color;
  background-color: $nc-white;
  border: 1px solid $color;

  @if $hoverstate {
    &:active {
      color: get-darker($color);
      border-color: get-darker($color);
    }

    @include nc-breakpoint($nc-bp-lg) {
      &:focus,
      &:hover {
        color: get-darker($color);
        border-color: get-darker($color);
      }
    }
  }

  &[disabled] {
    @include nc-btn-disabled($color, $outlined: true);
  }
}

// set disabled color
@mixin nc-btn-disabled($color, $outlined: false) {
  @if not $outlined {
    background-color: get-lighter($color);
  }
  @else {
    color: get-lighter($color);
    border-color: get-lighter($color);
  }
}

// unstyled button
@mixin nc-unbutton($txtcolor: $nc-link-color, $padding: $nc-button-padding, $nowrap: 'nowrap') {
  padding: 0 $padding;
  font-weight: normal;
  color: $txtcolor;
  text-align: center;
  background-color: $nc-transparent-color;
  border: 0;
  border-radius: 0;
  box-shadow: none;

  @if ($nowrap == 'nowrap') {
    white-space: nowrap;
  }

  &:hover {
    text-decoration: underline;
  }
}

// icon button
@mixin nc-icon-button() {
  @include nc-unbutton($padding: 0);

  line-height: 0;
}
