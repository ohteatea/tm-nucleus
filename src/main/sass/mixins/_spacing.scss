// pass in spacing set name (e.g, 'cozy') or map (e.g., ('top': 'cozy')) to $outside/inside
@mixin nc-spacing($outside: false, $inside: false, $responsive: true) {
  @if (not $outside and not $inside) {
    @error 'must specify either $outside or $inside';
  }

  @if ($outside) {
    @include nc-spacing-generator('margin', $outside, $responsive);
  }

  @if ($inside) {
    @include nc-spacing-generator('padding', $inside, $responsive);
  }
}


@mixin nc-spacing-generator($spacing-type, $spacing-values, $responsive) {

  // map of custom values
  @if (type-of($spacing-values) == map) {
    $shorthand: length($spacing-values) == 4;

    @include nc-spacing-print-map($spacing-type, $spacing-values, 'mini', $shorthand: $shorthand);

    @if ($responsive) {
      @include nc-breakpoint($nc-bp-md) {
        @include nc-spacing-print-map($spacing-type, $spacing-values, 'maxi', $shorthand: $shorthand);
      }
    }
  }

  // same values all around
  @else {
    #{$spacing-type}: nc-get-nested-map($nc-spacing-map, $spacing-values, 'mini');

    @if ($responsive) {
      @include nc-breakpoint($nc-bp-md) {
        #{$spacing-type}: nc-get-nested-map($nc-spacing-map, $spacing-values, 'maxi');
      }
    }
  }
}


@mixin nc-spacing-print-map($type, $map, $set, $shorthand: false) {
  $direction-list: 'top', 'right', 'bottom', 'left';
  $combined-output: '';

  // verify that the directions are valid
  @each $direction, $value in $map {
    @if (index($direction-list, $direction) == null) {
      @error '#{$direction} is an invalid name for #{$type}';
    }
  }

  @each $direction in $direction-list {
    $output: false;

    @if map-has-key($map, $direction) {
      $value: map-get($map, $direction);
      $is-number: type-of($value) == number;
      $is-negative-string: not $is-number and nc-is-neg-string($value);

      @if ($is-negative-string) {
        $value: str-slice($value, 2, str-length($value));
        $output: nc-spacing-val($value, $set);
        $output: -#{$output};
      }
      @else {
        $output: nc-spacing-val($value, $set);
      }
    }

    @if ($output) {
      @if ($shorthand) {
        $combined-output: #{$combined-output} #{$output};
      }
      @else {
        #{$type}-#{$direction}: $output;
      }
    }
  }

  @if ($shorthand) {
    #{$type}: $combined-output;
  }
}


@function nc-spacing-val($val, $set) {
  $output: false;
  $is-num: type-of($val) == number;
  $is-mapped: map-has-key($nc-spacing-map, $val);

  @if ($is-num or not $is-mapped) {
    @if ($set == 'maxi' and $is-num) {
      $output: $val * $nc-spacing-ratio;
    }
    @else {
      $output: $val;
    }
  }
  @else {
    $output: nc-get-nested-map($nc-spacing-map, $val, $set);
  }

  @return $output;
}


@function nc-get-spacing($name, $size) {
  @return nc-get-nested-map($nc-spacing-map, $name, $size);
}



// deprecate
@mixin nc-outer-spacing($val: false, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  @include nc-set-spacing('margin', $val, $top, $right, $bottom, $left);
}

@mixin nc-inner-spacing($val: false, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  @include nc-set-spacing('padding', $val, $top, $right, $bottom, $left);
}

@mixin nc-set-spacing($type, $val, $top, $right, $bottom, $left) {
  @if ($val and $val != 'custom') {
    #{$type}: $val;

    @include nc-breakpoint($nc-bp-md) {
      #{$type}: nc-increase-spacing($val);
    }
  }
  @else {
    #{$type}: $top $right $bottom $left;

    @include nc-breakpoint($nc-bp-md) {
      #{$type}: nc-increase-spacing($top) nc-increase-spacing($right) nc-increase-spacing($bottom) nc-increase-spacing($left);
    }
  }
}
